<!-- app/views/questionnaires/index.html.erb -->
<div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100" id="app">
  <!-- Header -->
  <header class="sticky top-0 z-50 backdrop-blur-md bg-white/90 border-b border-gray-300 shadow-sm">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16 sm:h-20">
        <div class="flex items-center space-x-3 sm:space-x-4">
          <!-- Logo -->
          <div class="relative group">
            <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-blue-600 to-indigo-700 rounded-xl flex items-center justify-center transform transition-transform group-hover:scale-110 shadow-lg">
              <span class="text-white font-black text-lg sm:text-xl">C</span>
            </div>
          </div>
          <div>
            <h1 class="text-xl sm:text-2xl font-black text-gray-900">
              Cogeli
            </h1>
            <p class="text-xs sm:text-sm text-gray-600 font-medium">Configuration fumisterie</p>
          </div>
        </div>
        <!-- Indicateur -->
        <div class="flex items-center space-x-2">
          <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span class="text-xs text-gray-600 hidden sm:inline">En ligne</span>
        </div>
      </div>
    </div>
  </header>

  <!-- Container principal -->
  <main class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-10">

    <!-- Page d'accueil -->
    <div id="home-page" class="page">
      <div class="text-center space-y-8 py-8 sm:py-16">
        <!-- Badge -->
        <div class="inline-flex items-center space-x-2 px-4 py-2 bg-blue-600 rounded-full shadow-md">
          <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          <span class="text-sm font-semibold text-white">Solution certifiée Cogeli</span>
        </div>

        <!-- Titre -->
        <div class="space-y-4">
          <h2 class="text-4xl sm:text-5xl lg:text-6xl font-black leading-tight">
            <span class="text-blue-600">Configurateur</span>
            <br />
            <span class="text-gray-900">fumisterie intelligent</span>
          </h2>
          <p class="text-lg sm:text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            Obtenez votre configuration personnalisée en <span class="font-bold text-gray-900">3 minutes</span>.
            Solution technique optimale garantie.
          </p>
        </div>

        <!-- Features cards -->
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 max-w-3xl mx-auto mt-8 mb-10">
          <div class="group p-4 bg-white rounded-2xl shadow-md border border-gray-200 hover:shadow-xl hover:border-green-400 transition-all duration-300 hover:-translate-y-1">
            <div class="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </div>
            <h3 class="font-bold text-gray-900 mb-1">Rapide</h3>
            <p class="text-sm text-gray-600">Configuration en 3 min</p>
          </div>

          <div class="group p-4 bg-white rounded-2xl shadow-md border border-gray-200 hover:shadow-xl hover:border-blue-400 transition-all duration-300 hover:-translate-y-1">
            <div class="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
              </svg>
            </div>
            <h3 class="font-bold text-gray-900 mb-1">Précis</h3>
            <p class="text-sm text-gray-600">Catalogue complet</p>
          </div>

          <div class="group p-4 bg-white rounded-2xl shadow-md border border-gray-200 hover:shadow-xl hover:border-purple-400 transition-all duration-300 hover:-translate-y-1">
            <div class="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
            </div>
            <h3 class="font-bold text-gray-900 mb-1">Export PDF</h3>
            <p class="text-sm text-gray-600">Devis professionnel</p>
          </div>
        </div>

        <!-- CTA Button -->
        <div class="relative inline-block">
          <button onclick="startQuestionnaire()" class="px-8 sm:px-10 py-4 sm:py-5 bg-blue-600 hover:bg-blue-700 text-white font-bold text-base sm:text-lg rounded-2xl shadow-xl hover:shadow-2xl transform transition-all duration-300 hover:scale-105 flex items-center space-x-3">
            <span>Commencer la configuration</span>
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Questionnaire -->
    <div id="questionnaire-page" class="page hidden">
      <!-- Progress section -->
      <div class="mb-8 bg-white rounded-2xl p-4 sm:p-6 shadow-md border border-gray-200">
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4">
          <div class="mb-2 sm:mb-0">
            <span class="text-xs text-gray-500 font-medium uppercase tracking-wider">Étape actuelle</span>
            <h4 id="current-page-name" class="text-lg font-bold text-gray-900">Le raccordement</h4>
          </div>
          <div class="text-right">
            <span id="progress-text" class="text-sm font-bold text-gray-900">1 / 8</span>
            <p class="text-xs text-gray-500">questions</p>
          </div>
        </div>
        <div class="relative">
          <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
            <div id="progress-bar" class="h-full bg-blue-600 rounded-full transition-all duration-500 ease-out"></div>
          </div>
        </div>
      </div>

      <!-- Question card -->
      <div id="question-container" class="bg-white rounded-2xl shadow-xl p-6 sm:p-10 border border-gray-200">
        <h3 id="question-title" class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mb-8"></h3>
        <div id="answer-options" class="space-y-3"></div>
      </div>

      <!-- Navigation -->
      <div class="flex justify-between items-center mt-8">
        <button id="prev-btn" onclick="previousQuestion()" class="group flex items-center space-x-2 px-5 sm:px-6 py-3 bg-white border-2 border-gray-300 rounded-xl text-gray-700 font-semibold hover:bg-gray-50 hover:border-gray-400 transition-all disabled:opacity-50 disabled:cursor-not-allowed shadow-sm">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
          </svg>
          <span class="hidden sm:inline">Précédent</span>
        </button>

        <button id="next-btn" onclick="nextQuestion()" class="group flex items-center space-x-2 px-6 sm:px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform transition-all hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100" disabled>
          <span>Suivant</span>
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Résultats -->
    <div id="results-page" class="page hidden">
      <div class="text-center mb-8">
        <div class="inline-flex items-center space-x-2 px-4 py-2 bg-green-600 rounded-full mb-4 shadow-md">
          <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          <span class="text-sm font-semibold text-white">Configuration terminée</span>
        </div>
        <h2 class="text-3xl sm:text-4xl font-black text-gray-900">Votre configuration personnalisée</h2>
      </div>

      <div id="results-container" class="space-y-6">
        <!-- Les résultats seront injectés ici avec des cards blanches sur fond gris -->
      </div>

      <!-- Actions -->
      <div class="mt-10 flex flex-col sm:flex-row gap-4 justify-center">
        <button onclick="restartQuestionnaire()" class="group flex items-center justify-center space-x-2 px-6 py-3 bg-white border-2 border-gray-300 rounded-xl text-gray-700 font-semibold hover:bg-gray-50 hover:border-gray-400 transition-all shadow-sm">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
          </svg>
          <span>Nouvelle configuration</span>
        </button>

        <button onclick="downloadPDF()" class="group flex items-center justify-center space-x-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform transition-all hover:scale-105">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
          </svg>
          <span>Télécharger PDF</span>
        </button>

        <button onclick="sendByEmail()" class="group flex items-center justify-center space-x-2 px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform transition-all hover:scale-105">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
          <span>Envoyer par email</span>
        </button>
      </div>
    </div>
  </main>
</div>

<style>
/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.page {
  animation: fadeIn 0.4s ease-out;
}

/* Styles pour les options de réponse */
#answer-options label {
  display: flex;
  align-items: center;
  padding: 1.25rem;
  border: 2px solid #e5e7eb;
  background: white;
  border-radius: 0.75rem;
  cursor: pointer;
  transition: all 0.2s;
}

#answer-options label:hover {
  border-color: #3b82f6;
  background: #f0f9ff;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

#answer-options label.selected {
  border-color: #2563eb;
  background: linear-gradient(to right, #eff6ff, #dbeafe);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}
</style>

<script>
// Configuration des questions
const questions = [
  {
    id: 'Q1',
    title: 'Sortie du poêle',
    page: 'Le raccordement',
    type: 'single',
    required: true,
    options: [
      { code: 'R1', label: 'ARRIERE (A)', value: 'A' },
      { code: 'R2', label: 'DESSUS (D)', value: 'D' }
    ]
  },
  {
    id: 'Q2',
    title: "S'agit-il d'une ventouse ?",
    page: 'Le raccordement',
    type: 'single',
    required: true,
    options: [
      { code: 'R1', label: 'OUI', value: 'OUI' },
      { code: 'R2', label: 'NON', value: 'NON' }
    ]
  },
  {
    id: 'Q3',
    title: 'Diamètre de raccordement',
    page: 'Le raccordement',
    type: 'single',
    required: true,
    condition: () => answers['Q2'] === 'R2', // Visible si pas ventouse
    options: [
      { code: 'R1', label: '80', value: '80' },
      { code: 'R2', label: '100', value: '100' },
      { code: 'R3', label: '130', value: '130' },
      { code: 'R4', label: '150', value: '150' },
      { code: 'R5', label: '180', value: '180' },
      { code: 'R6', label: '80/130', value: '80130' },
      { code: 'R7', label: '100/150', value: '100150' }
    ]
  },
  {
    id: 'Q4',
    title: 'Liaison entre CR et CF',
    page: 'La liaison',
    type: 'single',
    required: true,
    condition: () => answers['Q2'] === 'R2',
    options: [
      { code: 'R1', label: 'Plafond (P)', value: 'P' },
      { code: 'R2', label: 'Traversée de mur (90°)', value: '90' },
      { code: 'R3', label: 'Dans conduit (AD)', value: 'AD' }
    ]
  },
  {
    id: 'Q5',
    title: 'Type de travaux sur conduits de fumée',
    page: 'Le conduit de fumée',
    type: 'single',
    required: true,
    condition: () => answers['Q2'] === 'R2',
    options: [
      { code: 'R1', label: 'Tubage', value: 'T' },
      { code: 'R2', label: 'Création de conduit intérieur', value: 'DPI' },
      { code: 'R3', label: 'Création de conduit extérieur', value: 'DPE' },
      { code: 'R4', label: 'Création de conduit concentrique', value: 'CC' }
    ]
  },
  {
    id: 'Q6',
    title: 'Hauteur du conduit de fumée',
    page: 'Le conduit de fumée',
    type: 'single',
    required: true,
    condition: () => answers['Q2'] === 'R2',
    options: Array.from({length: 12}, (_, i) => ({
      code: `R${i+1}`,
      label: `${i+1} mètre${i > 0 ? 's' : ''}`,
      value: (i+1).toString()
    }))
  },
  {
    id: 'Q7',
    title: 'Diamètre intérieur du conduit de fumée',
    page: 'Le conduit de fumée',
    type: 'single',
    required: true,
    condition: () => answers['Q2'] === 'R2',
    options: [
      { code: 'R1', label: '80', value: '80' },
      { code: 'R2', label: '100', value: '100' },
      { code: 'R3', label: '130', value: '130' },
      { code: 'R4', label: '150', value: '150' },
      { code: 'R5', label: '180', value: '180' },
      { code: 'R6', label: '80/130', value: '80130' },
      { code: 'R7', label: '100/150', value: '100150' }
    ]
  },
  {
    id: 'Q8',
    title: 'Type conduit ou toiture',
    page: 'Le conduit de fumée',
    type: 'single',
    required: true,
    condition: () => answers['Q2'] === 'R2',
    options: [
      { code: 'R1', label: 'Conduit maçonné', value: 'CM' },
      { code: 'R2', label: 'Conduit métallique', value: 'MET' },
      { code: 'R3', label: 'Toiture terrasse 30-45°', value: 'TT' },
      { code: 'R4', label: 'Toiture ardoise ou tuiles plates', value: 'TA' },
      { code: 'R5', label: 'Toiture tuile', value: 'TTU' },
      { code: 'R6', label: 'Toiture bac acier', value: 'TBA' },
      { code: 'R7', label: 'Création extérieur', value: 'CE' }
    ]
  }
];

// État de l'application
let currentQuestionIndex = 0;
let answers = {};
let visibleQuestions = [];
let currentSessionId = null;

// Fonction pour obtenir le token CSRF Rails
function getCSRFToken() {
  const meta = document.querySelector('meta[name="csrf-token"]');
  return meta ? meta.getAttribute('content') : '';
}

// Fonctions de navigation
function showPage(pageId) {
  document.querySelectorAll('.page').forEach(page => {
    page.classList.add('hidden');
  });
  document.getElementById(pageId).classList.remove('hidden');
}

function startQuestionnaire() {
  answers = {};
  currentQuestionIndex = 0;
  currentSessionId = null;
  updateVisibleQuestions();
  showPage('questionnaire-page');
  displayQuestion();
}

function restartQuestionnaire() {
  startQuestionnaire();
}

function updateVisibleQuestions() {
  visibleQuestions = questions.filter(q => {
    if (!q.condition) return true;
    return q.condition();
  });
  console.log('Questions visibles:', visibleQuestions.map(q => q.id));
  console.log('Réponses actuelles:', answers);
}

function displayQuestion() {
  // TOUJOURS recalculer les questions visibles EN PREMIER
  updateVisibleQuestions();

  if (currentQuestionIndex >= visibleQuestions.length) {
    showResults();
    return;
  }

  const question = visibleQuestions[currentQuestionIndex];

  // Mise à jour du titre et de la page
  document.getElementById('question-title').textContent = question.title;
  document.getElementById('current-page-name').textContent = question.page;

  // Progress - recalculé avec les NOUVELLES questions visibles
  const progress = ((currentQuestionIndex + 1) / visibleQuestions.length) * 100;
  document.getElementById('progress-bar').style.width = `${progress}%`;
  document.getElementById('progress-text').textContent = `${currentQuestionIndex + 1} / ${visibleQuestions.length}`;

  // Options de réponse
  const container = document.getElementById('answer-options');
  container.innerHTML = '';

  question.options.forEach(option => {
    const label = document.createElement('label');
    label.className = 'flex items-center p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition';

    const isSelected = answers[question.id] === option.code;
    if (isSelected) {
      label.className += ' border-blue-600 bg-blue-50';
    }

    label.innerHTML = `
      <input type="radio"
             name="question"
             value="${option.code}"
             ${isSelected ? 'checked' : ''}
             onchange="selectAnswer('${question.id}', '${option.code}')"
             class="mr-3">
      <span class="text-lg">${option.label}</span>
    `;

    container.appendChild(label);
  });

  // Boutons navigation
  document.getElementById('prev-btn').disabled = currentQuestionIndex === 0;
  document.getElementById('next-btn').disabled = !answers[question.id];

  // MAINTENANT on vérifie avec les BONNES questions visibles
  if (currentQuestionIndex === visibleQuestions.length - 1) {
    document.getElementById('next-btn').textContent = 'Voir les résultats';
  } else {
    document.getElementById('next-btn').textContent = 'Suivant';
  }
}

function selectAnswer(questionId, answerCode) {
  answers[questionId] = answerCode;
  document.getElementById('next-btn').disabled = false;

  // Mise à jour visuelle
  document.querySelectorAll('#answer-options label').forEach(label => {
    const input = label.querySelector('input');
    if (input.value === answerCode) {
      label.className = 'flex items-center p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition border-blue-600 bg-blue-50';
    } else {
      label.className = 'flex items-center p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition';
    }
  });
}

function nextQuestion() {
  currentQuestionIndex++;
  updateVisibleQuestions(); // Recalculer APRÈS avoir incrémenté

  if (currentQuestionIndex >= visibleQuestions.length) {
    showResults();
  } else {
    displayQuestion();
  }
}

function previousQuestion() {
  if (currentQuestionIndex > 0) {
    currentQuestionIndex--;
    displayQuestion();
  }
}

// Calcul des résultats
function calculateKits() {
  const kits = [];

  // Kit ventouse
  if (answers['Q2'] === 'R1') {
    if (answers['Q1'] === 'R2') {
      kits.push({
        category: 'Kit ventouse',
        code: 'KVD',
        name: 'Kit ventouse départ dessus',
        price: 450
      });
    } else if (answers['Q1'] === 'R1') {
      kits.push({
        category: 'Kit ventouse',
        code: 'KVA',
        name: 'Kit ventouse départ arrière',
        price: 450
      });
    }
    return kits; // Si ventouse, on s'arrête là
  }

  // Raccordement (RA)
  if (answers['Q3'] && answers['Q1'] && answers['Q4']) {
    const diam = questions.find(q => q.id === 'Q3').options.find(o => o.code === answers['Q3']).value;
    const outlet = answers['Q1'] === 'R2' ? 'D' : 'A';
    const liaison = questions.find(q => q.id === 'Q4').options.find(o => o.code === answers['Q4']).value;

    kits.push({
      category: 'Raccordement',
      code: `RA${diam}${outlet}${liaison}`,
      name: `Raccordement ${diam}mm sortie ${outlet === 'D' ? 'dessus' : 'arrière'} liaison ${liaison === 'P' ? 'plafond' : liaison === '90' ? 'mur 90°' : 'direct'}`,
      price: 250
    });
  }

  // Conduit (CF)
  if (answers['Q5'] && answers['Q7'] && answers['Q6']) {
    const type = questions.find(q => q.id === 'Q5').options.find(o => o.code === answers['Q5']).value;
    const diam = questions.find(q => q.id === 'Q7').options.find(o => o.code === answers['Q7']).value;
    const height = questions.find(q => q.id === 'Q6').options.find(o => o.code === answers['Q6']).value;

    let code = '';
    let name = '';

    if (type === 'T') {
      // Tubage avec hauteurs groupées - FIX: conversion en nombre
      let heightGroup = parseInt(height) <= 6 ? '6' : height === '7' ? '8' : parseInt(height) <= 9 ? '10' : '15';
      code = `CFT${diam}-${heightGroup}`;
      name = `Conduit Tubage ${diam}mm ${heightGroup}m`;
    } else if (type === 'DPI') {
      code = `CFDPI${diam}-${height}`;
      name = `Conduit intérieur ${diam}mm ${height}m`;
    } else if (type === 'DPE') {
      code = `CFDPE${diam}-${height}`;
      name = `Conduit extérieur ${diam}mm ${height}m`;
    } else if (type === 'CC') {
      code = `CFCC${diam}-${height}`;
      name = `Conduit concentrique ${diam}mm ${height}m`;
    }

    kits.push({
      category: 'Conduit',
      code: code,
      name: name,
      price: 400 + parseInt(height) * 50
    });
  }

  // Liaison (LI)
  if (answers['Q3'] && answers['Q4'] && answers['Q5'] && answers['Q7'] && answers['Q5'] !== 'R4') {
    const diamRac = questions.find(q => q.id === 'Q3').options.find(o => o.code === answers['Q3']).value;
    const liaison = questions.find(q => q.id === 'Q4').options.find(o => o.code === answers['Q4']).value;
    const type = questions.find(q => q.id === 'Q5').options.find(o => o.code === answers['Q5']).value;
    const diamConduit = questions.find(q => q.id === 'Q7').options.find(o => o.code === answers['Q7']).value;

    kits.push({
      category: 'Liaison',
      code: `LI${diamRac}${liaison}${type}${diamConduit}`,
      name: `Liaison ${diamRac}mm vers ${type} ${diamConduit}mm`,
      price: 150
    });
  }

  // Finition haute (FH)
  if (answers['Q5'] && answers['Q7'] && answers['Q8']) {
    const type = questions.find(q => q.id === 'Q5').options.find(o => o.code === answers['Q5']).value;
    const diam = questions.find(q => q.id === 'Q7').options.find(o => o.code === answers['Q7']).value;
    const roof = questions.find(q => q.id === 'Q8').options.find(o => o.code === answers['Q8']).value;

    let roofCode = roof === 'CM' ? 'MAC' : roof === 'MET' ? 'MET' : roof === 'TT' ? 'PLAT' : roof === 'TA' ? 'ARDTP' : roof === 'TTU' ? 'TUMEC' : roof === 'TBA' ? 'ACIER' : '';

    kits.push({
      category: 'Finition haute',
      code: `FH${type}${diam}${roofCode}`,
      name: `Finition haute ${type} ${diam}mm ${roof}`,
      price: 200
    });
  }

  // Options spéciales
  if (answers['Q3'] && (answers['Q3'] === 'R6' || answers['Q3'] === 'R7')) {
    const diam = questions.find(q => q.id === 'Q3').options.find(o => o.code === answers['Q3']).value;
    kits.push({
      category: 'Option',
      code: `DEVRAC${diam}`,
      name: `DEVRAC ${diam}`,
      price: 180
    });
  }

  if (answers['Q3'] && answers['Q8'] === 'R1') {
    const diam = questions.find(q => q.id === 'Q3').options.find(o => o.code === answers['Q3']).value;
    if (['80', '100', '130', '150'].includes(diam)) {
      kits.push({
        category: 'Option',
        code: `FHREH${diam}`,
        name: `Rehausse de conduit ${diam}`,
        price: 150
      });
    }
  }

  return kits;
}

// Calcul du total
function calculateTotal() {
  const kits = calculateKits();
  return kits.reduce((total, kit) => total + kit.price, 0);
}

// Sauvegarde en base de données
async function saveToDatabase() {
  const kits = calculateKits();
  const total = calculateTotal();

  // Afficher un indicateur de chargement
  showNotification('Sauvegarde en cours...', 'info');

  try {
    const response = await fetch('/api/save_results', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': getCSRFToken()
      },
      body: JSON.stringify({
        answers: answers,
        kits: kits,
        total: total,
        save_to_db: true
      })
    });

    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }

    const data = await response.json();

    if (data.success) {
      currentSessionId = data.session_id;
      showNotification('Configuration sauvegardée avec succès!', 'success');

      // Activer le bouton d'envoi par email
      const emailBtn = document.getElementById('email-btn');
      if (emailBtn) {
        emailBtn.disabled = false;
        emailBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      }
    } else {
      throw new Error('Échec de la sauvegarde');
    }
  } catch (error) {
    console.error('Erreur de sauvegarde:', error);
    showNotification('Erreur lors de la sauvegarde. Veuillez réessayer.', 'error');
  }
}

// Génération du PDF avec WickedPDF
async function downloadPDF() {
  const kits = calculateKits();
  const total = calculateTotal();

  // Grouper les kits par catégorie pour le PDF
  const grouped = {};
  kits.forEach(kit => {
    if (!grouped[kit.category]) {
      grouped[kit.category] = [];
    }
    grouped[kit.category].push(kit);
  });

  showNotification('Génération du PDF en cours...', 'info');

  try {
    const response = await fetch('/api/generate_pdf', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': getCSRFToken()
      },
      body: JSON.stringify({
        kits: grouped,
        total: total,
        answers: answers // Envoyer les codes de réponse R1, R2, etc. pour le mapping côté serveur
      })
    });

    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }

    const blob = await response.blob();
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `configuration_cogeli_${new Date().toISOString().split('T')[0]}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showNotification('PDF téléchargé avec succès!', 'success');
  } catch (error) {
    console.error('Erreur de génération PDF:', error);
    showNotification('Erreur lors de la génération du PDF. Veuillez réessayer.', 'error');
  }
}

// Envoi par email
async function sendByEmail() {
  const emailInput = prompt('Entrez votre adresse email:');
  if (!emailInput || !emailInput.includes('@')) {
    showNotification('Adresse email invalide', 'error');
    return;
  }

  showNotification('Envoi en cours...', 'info');

  try {
    const response = await fetch('/api/send_email', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': getCSRFToken()
      },
      body: JSON.stringify({
        email: emailInput,
        session_id: currentSessionId,
        kits: calculateKits(),
        total: calculateTotal()
      })
    });

    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }

    const data = await response.json();

    if (data.success) {
      showNotification(`Configuration envoyée à ${emailInput}`, 'success');
    } else {
      throw new Error('Échec de l\'envoi');
    }
  } catch (error) {
    console.error('Erreur d\'envoi email:', error);
    showNotification('Erreur lors de l\'envoi. Veuillez réessayer.', 'error');
  }
}

// Fonction d'affichage des notifications
function showNotification(message, type = 'info') {
  // Créer l'élément de notification
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 z-50`;

  // Style selon le type
  switch (type) {
    case 'success':
      notification.className += ' bg-green-500 text-white';
      break;
    case 'error':
      notification.className += ' bg-red-500 text-white';
      break;
    case 'info':
    default:
      notification.className += ' bg-blue-500 text-white';
      break;
  }

  notification.textContent = message;
  document.body.appendChild(notification);

  // Animation d'entrée
  setTimeout(() => {
    notification.style.opacity = '1';
    notification.style.transform = 'translateX(0)';
  }, 10);

  // Suppression automatique après 3 secondes
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(100%)';
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 300);
  }, 3000);
}

function showResults() {
  const kits = calculateKits();
  const container = document.getElementById('results-container');

  // Sauvegarder automatiquement les résultats
  saveToDatabase();

  // Grouper par catégorie
  const grouped = {};
  let total = 0;

  kits.forEach(kit => {
    if (!grouped[kit.category]) {
      grouped[kit.category] = [];
    }
    grouped[kit.category].push(kit);
    total += kit.price;
  });

  // Afficher les résultats
  container.innerHTML = '';

  Object.keys(grouped).forEach(category => {
    const section = document.createElement('div');
    section.className = 'bg-white rounded-lg shadow-lg p-6';

    let html = `<h3 class="text-xl font-bold text-gray-900 mb-4">${category}</h3>`;

    grouped[category].forEach(kit => {
      html += `
        <div class="flex justify-between items-center py-2 border-b last:border-0">
          <div>
            <span class="font-semibold">${kit.code}</span> -
            <span class="text-gray-600">${kit.name}</span>
          </div>
          <span class="font-bold text-blue-600">${kit.price}€</span>
        </div>
      `;
    });

    section.innerHTML = html;
    container.appendChild(section);
  });

  // Total
  const totalSection = document.createElement('div');
  totalSection.className = 'bg-blue-50 rounded-lg p-6 mt-6';
  totalSection.innerHTML = `
    <div class="flex justify-between items-center">
      <span class="text-2xl font-bold text-gray-900">Total HT</span>
      <span class="text-3xl font-bold text-blue-600">${total}€</span>
    </div>
  `;
  container.appendChild(totalSection);

  showPage('results-page');
}
</script>
